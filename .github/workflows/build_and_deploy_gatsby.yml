name: build_and_deploy_gatsby

on:
  workflow_dispatch:
    inputs:
      host:
        description: 'Targeted host'
        required: true
        default: 'nightly.simonknittel.de'
      datoCmsEnvironment:
        description: 'Dato CMS environment'
        required: true
        default: 'master'
      useCache:
        description: 'Use cache'
        required: false
        default: 'yes'
      ref:
        description: 'Ref'
        required: false

jobs:

  build_and_deploy:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: gatsby

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.ref }}

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14.17.1

    - run: echo "//npm.pkg.github.com/:_authToken=$GITHUB_TOKEN" >> .npmrc
      working-directory: ./
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache node_modules
      id: cache
      uses: actions/cache@v2
      with:
        path: node_modules
        key: node-${{ hashFiles('gatsby/package-lock.json', '.nvmrc') }}

    - name: Clear node_modules
      if: github.event.inputs.useCache == 'no'
      run: rm -rf node_modules

    - run: npm ci
      if: github.event.inputs.useCache == 'no' || steps.cache.outputs.cache-hit == 'false'

    # - name: Cache Gatsby
    #   uses: actions/cache@v2
    #   with:
    #     path: |
    #       gatsby/.cache
    #       gatsby/public
    #     key: gatsby-${{ github.run_id }}
    #     restore-keys: |
    #       gatsby-

    # - name: Clear Gatsby cache
    #   if: github.event.inputs.useCache == 'no'
    #   run: rm -rf .cache public

    - name: Build for IPFS
      if: github.event.inputs.host == 'simonknittel.de'
      env:
        HOST: ${{ github.event.inputs.host }}
        DATO_CMS_ENVIRONMENT: ${{ github.event.inputs.datoCmsEnvironment }}
        CI: true
        NODE_ENV: production
      run: npm run build

    - name: Upload to IPFS
      if: github.event.inputs.host == 'simonknittel.de'
      id: ipfsUpload
      uses: aquiladev/ipfs-action@v0.1.6-0
      with:
        path: ./gatsby/public
        service: pinata
        pinataKey: ${{ secrets.PINATA_KEY }}
        pinataSecret:  ${{ secrets.PINATA_SECRET }}

    - name: Build
      env:
        HOST: ${{ github.event.inputs.host }}
        DATO_CMS_ENVIRONMENT: ${{ github.event.inputs.datoCmsEnvironment }}
        CI: true
        NODE_ENV: production
        GATSBY_IPFS_CID: ${{ steps.ipfsUpload.outputs.hash }}
      run: npm run build

    # TODO: Implement on Gatsby Cloud as well
    - name: Notify Sentry of new release and enable Suspect Commits
      uses: getsentry/action-release@v1.1.5
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: simonknittel
        SENTRY_PROJECT: homepage
      with:
        environment: ${{ github.event.inputs.host }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        export_default_credentials: true

    - name: Gzip files
      run: |
        gzip -r public
        find public -type f -name "*.*" -exec sh -c 'for pathname; do mv -i "$pathname" "${pathname%.*}"; done' sh {} +

    - name: Upload to Cloud Storage
      env:
        HOST: ${{ github.event.inputs.host }}
      run: |
        gsutil \
          -m \
          -q \
          -h "Content-Encoding: gzip" \
        rsync \
          -r \
          -d public \
        gs://$HOST

    # Source: https://www.gatsbyjs.com/docs/caching/
    - name: Set Cache-Control headers
      env:
        HOST: ${{ github.event.inputs.host }}
      run: |
        gsutil -m -q setmeta -h "Cache-Control: public, max-age=31536000, immutable" \
          gs://$HOST/static/** \
          gs://$HOST/icons/** \
          gs://$HOST/favicon** \
          gs://$HOST/**.css \
          gs://$HOST/**.js || :

        gsutil -m -q setmeta -h "Cache-Control: public, max-age=0, must-revalidate" \
          gs://$HOST/**.html \
          gs://$HOST/page-data/** \
          gs://$HOST/robots.txt \
          gs://$HOST/sitemap.xml \
          gs://$HOST/manifest.webmanifest \
          gs://$HOST/rss.xml || :

    # Source: https://cloud.google.com/cdn/docs/invalidating-cached-content
    - name: Invalidate CDN cache
      run: |
        gcloud compute url-maps invalidate-cdn-cache simonknittelde \
          --path "/*"

    - name: Notify Dato CMS (Success)
      if: ${{ success() }}
      env:
        DATO_CMS_NIGHTLY_WEBHOOK: ${{ secrets.DATO_CMS_NIGHTLY_WEBHOOK }}
      run: |
        curl -n -X POST https://webhooks.datocms.com/$DATO_CMS_NIGHTLY_WEBHOOK/deploy-results \
          -H 'Content-Type: application/json' \
          -d '{ "status": "success" }'

    - name: Notify Dato CMS (Failure)
      if: ${{ failure() }}
      env:
        DATO_CMS_NIGHTLY_WEBHOOK: ${{ secrets.DATO_CMS_NIGHTLY_WEBHOOK }}
      run: |
        curl -n -X POST https://webhooks.datocms.com/$DATO_CMS_NIGHTLY_WEBHOOK/deploy-results \
          -H 'Content-Type: application/json' \
          -d '{ "status": "error" }'
